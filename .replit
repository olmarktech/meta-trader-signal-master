modules = ["python-3.11", "postgresql-16"]

[nix]
channel = "stable-24_05"
packages = ["glibcLocales"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "MT5 Signal Bot"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "feedback_shell"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "MT5 Web Interface"

[[workflows.workflow]]
name = "MT5 Signal Bot"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \"print('MT5 Signal Bot Simulator'); print('Running MT5_Signal_Bot.mq5...'); print('Note: This is a simulation as the actual MT5 platform is not available in this environment.'); print('Loaded indicator modules...'); print('Loaded signal generator...'); print('Loaded risk manager...'); print('Simulating dashboard display...'); print('Signal Bot initialized successfully with the TrendFollowing strategy preset.'); print('Monitoring markets for trading signals...')\""
waitForPort = 5000

[[workflows.workflow]]
name = "feedback_shell"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "find . -type f -name \"*.mq*\" | sort"

[[workflows.workflow]]
name = "MT5 Web Interface"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python app.py"
waitForPort = 5000

[deployment]
run = ["sh", "-c", "python -c \"print('MT5 Signal Bot Simulator'); print('Running MT5_Signal_Bot.mq5...'); print('Note: This is a simulation as the actual MT5 platform is not available in this environment.'); print('Loaded indicator modules...'); print('Loaded signal generator...'); print('Loaded risk manager...'); print('Simulating dashboard display...'); print('Signal Bot initialized successfully with the TrendFollowing strategy preset.'); print('Monitoring markets for trading signals...')\""]

[[ports]]
localPort = 5000
externalPort = 80
